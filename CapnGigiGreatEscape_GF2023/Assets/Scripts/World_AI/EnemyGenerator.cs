using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using static WorldObject_Classes;

public class EnemyGenerator : MonoBehaviour
{
    // Grab Enemy Prefabs
    private static List<GameObject> enemyList = new List<GameObject>();
    private static List<GameObject> enemySpawnMarkers = new List<GameObject>();

    // Grab Spawn Positions 
    private UnityEngine.Object[] initArrayOfEnemySpawnMarkers;
    private static List<Vector3> enemySpawnPositions = new List<Vector3>();
    private Transform parentObj;
    private GameObject enemyObj;
    private Transform enemyToSpawn;
    private ProceduralAI ai;

    // Start is called before the first frame update
    void Awake()
    {
        // Fetch list of Platform prefabs (Runs in Start to ensure list has been generated by other script on Awake)
        enemyList = ProceduralAI.enemyPrefabs;
        try
        {
            enemySpawnMarkers = GenerateEnemySpawnMarkerList();

        }
        catch (NullReferenceException nre)
        {
            Debug.Log(nre.Message);
        }
    }

    // Update is called once per frame
    void Update()
    {
        
    }
    #region Spawner
    public void SpawnEnemies()
    {
        parentObj = gameObject.transform;

        foreach (Transform childObj in parentObj)
        {
            if (childObj.CompareTag("EnemySpawn"))
            {
                enemySpawnPositions.Add(childObj.position);
                break;
            }
        }
        //Get the transform to refrence the Spawn Positions
        //Transform spawnedEnemy = SpawnEnemies(enemySpawnPositions);
        foreach (Vector3 enemySpawnPosition in enemySpawnPositions)
        {
            SpawnEnemies(enemySpawnPosition);
        }
    }

    // SpawnEnemies(AtPosition)
    public Transform SpawnEnemies(Vector3 enemySpawnPosition)
    {

        // Get random Enemy from List
        enemyToSpawn = RandomEnemyGenerator(0, enemyList.Count);
        //Vector3 spawnPoint = RandomSpawnGenerator(0, enemySpawnPositions.Count);
        Transform enemySpawn = Instantiate(enemyToSpawn, enemySpawnPosition, Quaternion.identity);
        ProceduralAI.enemySpawned += 1;
        // Return the transform for sister method
        return enemySpawn;


        /*
        foreach (Vector3 enemySpawnPosition in enemySpawnPositions)
        {
            // Get random Enemy from List
            enemyToSpawn = RandomEnemyGenerator(0, enemyList.Count);
            Transform enemy = Instantiate(enemyToSpawn, enemySpawnPosition, Quaternion.identity);
            ProceduralAI.enemySpawned += 1;
        }
        */
    }
#endregion

    // REGGIE
    private Transform RandomEnemyGenerator(int floor, int ceiling)
    {
        // Variable to hold the index of random list element
        int randomEnemy = 0;

        // Get random index for list
        randomEnemy = UnityEngine.Random.Range(0, enemyList.Count);

        // Call GameObject from list and get its transform
        enemyObj = enemyList[randomEnemy];
        enemyToSpawn = enemyObj.transform;

        // Return the randomly-chosen enemy to spawn
        return enemyToSpawn;
    }

    private Vector3 RandomSpawnGenerator(int floor, int ceiling)
    {
        // Variable to hold the index of random list element
        int randomSpawnPoint = 0;

        // Get random index for list
        randomSpawnPoint = UnityEngine.Random.Range(0, enemySpawnPositions.Count);

        // Call Vector from list and get its transform
        Vector3 spawnPoint = enemySpawnPositions[randomSpawnPoint];
        //enemyToSpawn = enemyObj.transform;

        // Return the randomly-chosen enemy to spawn
        return spawnPoint;
    }
    public List<GameObject> GenerateEnemySpawnMarkerList()
    {
        try
        {
            enemySpawnMarkers = ai.GenerateEnemySpawnMarkerList();
        }
        catch (NullReferenceException nre)
        {
            Debug.Log("Null Reference Exception! : " + nre);
        }      
        // Return new Enemy List
        return new List<GameObject>(enemySpawnMarkers);
    }

    private void OnDisable()
    {
        // Code here
    }



}
