using UnityEngine;
using System;
using System.Collections.Generic;

public class GroundGenerator : MonoBehaviour
{
    #region Variables
    [SerializeField] private Transform groundStart;
    [SerializeField] private GameObject player;

    //private const float DISTANCE_TO_SPAWN_SECTION = 25f;
    //private const float DISTANCE_TO_DESTROY_SECTION = 25f;

    // Variables for the objects
    private GameObject groundObj;
    private Transform groundChunk;

    // Positions for Spawning Chunks
    public Vector3 groundEnd_Right;
    public Vector3 groundEnd_Left;

    private static List<GameObject> groundList = new List<GameObject>();

    #endregion

    #region Startup
    void Awake()
    {
        // Access the player
        player = GameObject.Find("CapnGigi");

        // Find the child EndPosition object in the GameStart parent
        groundEnd_Right = groundStart.Find("GroundEnd_Right").position;
    }

    private void Start()
    {
        // Fetch list of Platform prefabs (Runs in Start to ensure list has been generated by other script on Awake)
        groundList = ListFactory.groundPrefabs;
    }
    #endregion

    #region Spawn Platforms to the Right
    public void SpawnGroundChunk_Right()
    {
        //Get the transform to refrence the next End Position
        Transform lastGroundEnd_Right = SpawnGroundChunk_Right(groundEnd_Right);
        groundEnd_Right = lastGroundEnd_Right.Find("GroundEnd_Right").position;

        Debug.Log("Ground Spawned: " + ListFactory.groundChunkActivated);

    }
    public Transform SpawnGroundChunk_Right(Vector3 nextChunk)
    {
        // Get random Platform Chunk from List
        groundChunk = RandomChunkerizer(0, groundList.Count-1);

        // Spawn the Platform Chunk and log to AI count
        Transform nextGroundChunk_Right = Instantiate(groundChunk, nextChunk, Quaternion.identity);
        ListFactory.groundChunkActivated += 1;

        // Return the transform for sister method
        return nextGroundChunk_Right;
    }
    #endregion

    #region Spawn Platforms to the Left
    public void SpawnGroundChunk_Left()
    {
        //Get the transform to refrence the end of previous chunk
        Transform lastGroundEnd_Left = SpawnGroundChunk_Left(groundEnd_Left);
        groundEnd_Right = lastGroundEnd_Left.Find("GroundEnd_Right").position;
    }
    public Transform SpawnGroundChunk_Left(Vector3 nextChunk)
    {
        // Set Transform to random Platform Chunk from List
        groundChunk = RandomChunkerizer(0, groundList.Count-1);

        // Spawn the Platform chunk and log to AI count
        Transform nextGroundChunk_Left = Instantiate(groundChunk, nextChunk, Quaternion.identity);
        ListFactory.groundChunkActivated += 1;

        // Return the transform for sister method
        return nextGroundChunk_Left;
    }
    #endregion

    #region Random "Chunkerizer"
    private Transform RandomChunkerizer(int floor, int ceiling)
    {
        // Variable to hold the index of random list element
        int randomChunk = 0;

        // Get random index for list
        randomChunk = UnityEngine.Random.Range(floor, ceiling);

        // Call GameObject from list and get its transform
        groundObj = groundList[randomChunk];
        groundObj.SetActive(true);
        groundChunk = groundObj.transform;

        // Return the randomly-chosen Platform Chunk
        return groundChunk;
    }
    #endregion
}

