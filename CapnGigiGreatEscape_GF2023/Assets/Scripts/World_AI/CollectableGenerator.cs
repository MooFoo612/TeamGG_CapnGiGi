using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using static WorldObject_Classes;

public class CollectableGenerator : MonoBehaviour
{
    // Grab Enemy Prefabs
    private List<GameObject> collectableList = new List<GameObject>();
    private List<Vector3> collectableSpawnPositions = new List<Vector3>();
    private List<GameObject> collectableSpawnMarkers = new List<GameObject>();

    // Grab Spawn Positions 
    private UnityEngine.Object[] initArrayOfCollectableSpawnMarkers;
    private Transform parentObj;
    private GameObject collectableObj;
    private Transform collectableToSpawn;

    private ProceduralAI ai;

    // Start is called before the first frame update
    void Awake()
    {
        // Fetch list of Platform prefabs (Runs in Start to ensure list has been generated by other script on Awake)
        collectableList = ProceduralAI.collectablePrefabs;
        try
        {
            //enemySpawnMarkers = GenerateEnemySpawnMarkerList();
            collectableSpawnPositions = GenerateCollectableSpawnMarkerPositions();

        }
        catch (NullReferenceException nre)
        {
            Debug.Log(nre.Message);
        }
    }

    // Update is called once per frame
    void Update()
    {

    }
    #region Spawner
    public void SpawnEnemies()
    {
        parentObj = gameObject.transform;

        foreach (Transform childObj in parentObj)
        {
            if (childObj.CompareTag("EnemySpawn"))
            {
                collectableSpawnPositions.Add(childObj.position);
            }
        }
        //Get the transform to refrence the Spawn Positions
        //Transform spawnedEnemy = SpawnEnemies(enemySpawnPositions);
        foreach (GameObject enemySpawnMarker in collectableSpawnMarkers)
        {
            foreach (Vector3 enemySpawnPosition in collectableSpawnPositions)
            {
                SpawnEnemies(enemySpawnPosition);
            }
        }
    }

    // SpawnEnemies(AtPosition)
    public Transform SpawnEnemies(Vector3 enemySpawnPosition)
    {
        // Get random Enemy from List
        collectableToSpawn = RandomEnemyGenerator(0, collectableList.Count);

        // Get the Transform to Spawn Instance and log to controller + console
        Transform spawnEnemy = Instantiate(collectableToSpawn, enemySpawnPosition, Quaternion.identity);
        ProceduralAI.enemySpawned += 1;
        Debug.Log("Enemy Spawned: " + spawnEnemy.name + ". Total Enemies spawned: " + ProceduralAI.enemySpawned);

        // Return enemy transform
        return spawnEnemy;
    }
    #endregion

    // REGGIE
    private Transform RandomEnemyGenerator(int floor, int ceiling)
    {
        // Variable to hold the index of random list element
        int randomEnemy = 0;

        try
        {
            // Get random index for list
            randomEnemy = UnityEngine.Random.Range(floor, ceiling);

            // Call GameObject from list and get its transform
            collectableObj = collectableList[randomEnemy];
            collectableToSpawn = collectableObj.transform;

            // Return the randomly-chosen enemy to spawn
            return collectableToSpawn;
        }
        catch (ArgumentException ae)
        {
            Debug.Log(ae.Message);

            if (collectableList.Count == 0)
            {
                // Generate new Marker list
                collectableList = ai.GenerateEnemyList();
            }

            // Get random index for list
            randomEnemy = UnityEngine.Random.Range(floor, ceiling);

            // Call GameObject from list and get its transform
            collectableObj = collectableList[randomEnemy];
            collectableToSpawn = collectableObj.transform;

            // Return the randomly-chosen enemy to spawn
            return collectableToSpawn;
        }
    }

    private Vector3 RandomSpawnGenerator(int floor, int ceiling)
    {
        // Variable to hold the index of random list element
        int randomSpawnPoint = 0;

        // Get random index for list
        randomSpawnPoint = UnityEngine.Random.Range(floor, ceiling);

        // Call Vector from list and get its transform
        Vector3 spawnPoint = collectableSpawnPositions[randomSpawnPoint];
        //enemyToSpawn = enemyObj.transform;

        // Return the randomly-chosen enemy to spawn
        return spawnPoint;
    }

    public List<Vector3> GenerateCollectableSpawnMarkerPositions()
    {
        if (collectableSpawnPositions.Count > 0)
        {
            collectableSpawnPositions.Clear();

            try
            {
                parentObj = gameObject.transform;

                foreach (Transform childObj in parentObj)
                {
                    if (childObj.CompareTag("EnemySpawn"))
                    {
                        collectableSpawnPositions.Add(childObj.position);
                    }
                }
            }
            catch (NullReferenceException nre)
            {
                Debug.Log("Null Reference Exception! : " + nre);
            }

            return new List<Vector3>(collectableSpawnPositions);
        }
        else
        {
            try
            {
                parentObj = gameObject.transform;

                foreach (Transform childObj in parentObj)
                {
                    if (childObj.CompareTag("EnemySpawn"))
                    {
                        collectableSpawnPositions.Add(childObj.position);
                    }
                }
            }
            catch (NullReferenceException nre)
            {
                Debug.Log("Null Reference Exception! : " + nre);
            }

            // Return new Enemy List
            return new List<Vector3>(collectableSpawnPositions);
        }
    }
    /*
    public List<GameObject> GenerateEnemySpawnMarkerList()
    {
        if (enemySpawnMarkers.Count > 0)
        {
            enemySpawnMarkers.Clear();

            try
            {
                parentObj = gameObject.transform;

                foreach (GameObject childObj in parentObj)
                {
                    if (childObj.CompareTag("EnemySpawn"))
                    {
                        enemySpawnMarkers.Add(childObj);
                    }
                }
            }
            catch (NullReferenceException nre)
            {
                Debug.Log("Null Reference Exception! : " + nre);
                parentObj = gameObject.transform;

                foreach (GameObject childObj in parentObj)
                {
                    if (childObj.CompareTag("EnemySpawn"))
                    {
                        enemySpawnMarkers.Add(childObj);
                    }
                }
            }

            return new List<GameObject>(enemySpawnMarkers);
        }
        else
        {
            try
            {
                parentObj = gameObject.transform;

                foreach (GameObject childObj in parentObj)
                {
                    if (childObj.CompareTag("EnemySpawn"))
                    {
                        enemySpawnMarkers.Add(childObj);
                    }
                }
            }
            catch (NullReferenceException nre)
            {
                Debug.Log("Null Reference Exception! : " + nre);
            }

            // Return new Enemy List
            return new List<GameObject>(enemySpawnMarkers);
        }
    }*/

    private void OnDisable()
    {
        // Code here
    }



}
