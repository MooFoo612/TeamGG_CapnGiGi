using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using static WorldObject_Classes;

public class CollectableGenerator : MonoBehaviour
{
    // Grab Enemy Prefabs
    private static List<GameObject> collectableList = new List<GameObject>();
    private static List<GameObject> collectableSpawnMarkers = new List<GameObject>();

    // Grab Spawn Positions 
    private UnityEngine.Object[] initArrayOfCollectableSpawnMarkers;
    private static List<Vector3> collectableSpawnPositions = new List<Vector3>();
    private GameObject collectableObj;
    private Transform collectableToSpawn;
    private Transform collectableSpawn;
    private Transform collectableSpawnMarker;
    private Transform spawnedCollectable;
    private ProceduralAI ai;

    // Start is called before the first frame update
    void Awake()
    {
        // Fetch list of Platform prefabs (Runs in Start to ensure list has been generated by other script on Awake)
        collectableList = ProceduralAI.enemyPrefabs;
        collectableSpawnMarkers = GenerateCollectableSpawnMarkerList();

    }

    // Update is called once per frame
    void Update()
    {

    }
    #region Spawner
    public void SpawnCollectables()
    {
        foreach (Transform collectableSpawnMarker in gameObject.transform)
        {
            if (collectableSpawnMarker.CompareTag("CollectableSpawn"))
            {
                collectableSpawnPositions.Add(collectableSpawnMarker.position);
                break;
            }
        }
        //Get the transform to refrence the Spawn Positions
        spawnedCollectable = SpawnCollectables(collectableSpawnPositions);
    }

    // SpawnEnemies(AtPosition)
    public Transform SpawnCollectables(List<Vector3> collectableSpawnPositions)
    {
        foreach (Vector3 collectableSpawnPosition in collectableSpawnPositions)
        {
            // Get random Enemy from List
            collectableToSpawn = RandomCollectableGenerator(0, collectableList.Count);
            collectableSpawn = Instantiate(collectableToSpawn, collectableSpawnPosition, Quaternion.identity);
            ProceduralAI.collectableSpawned += 1;
        }
        // Return the transform for sister method
        return collectableToSpawn;
    }
    #endregion

    // REGGIE
    private Transform RandomCollectableGenerator(int floor, int ceiling)
    {
        // Variable to hold the index of random list element
        int randomCollectable = 0;

        // Get random index for list
        randomCollectable = UnityEngine.Random.Range(0, collectableList.Count);

        // Call GameObject from list and get its transform
        collectableObj = collectableList[randomCollectable];
        collectableToSpawn = collectableObj.transform;

        // Return the randomly-chosen enemy to spawn
        return collectableToSpawn;
    }

    public List<GameObject> GenerateCollectableSpawnMarkerList()
    {
        try
        {
            collectableSpawnMarkers = ai.GenerateCollectableSpawnMarkerList();
        }
        catch (NullReferenceException nre)
        {
            Debug.Log(nre.Message);
        }
        finally
        {
            //enemySpawnMarkers = enemySpawnMarkers.Clear();
        }
        // Return new Enemy List
        return new List<GameObject>(collectableSpawnMarkers);
    }

    private void OnDisable()
    {
        // Code here
    }



}
