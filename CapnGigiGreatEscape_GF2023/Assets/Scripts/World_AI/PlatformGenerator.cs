using UnityEngine;
using System;
using System.Collections.Generic;

public class PlatformGenerator : MonoBehaviour
{
    #region Variables
    [SerializeField] private Transform platformStart;
    [SerializeField] private GameObject player;

    private const float DISTANCE_TO_SPAWN_SECTION = 25f;
    //private const float DISTANCE_TO_DESTROY_SECTION = 25f;

    // Variables for the objects
    private GameObject platformObj;
    private Transform platformChunk;

    // Positions for Spawning Chunks
    private Vector3 platformEnd_Right;
    private Vector3 platformEnd_Left;

    private static List<GameObject> platformList = new List<GameObject>();

    #endregion

    #region Startup
    void Awake()
    {
        // Access the player
        player = GameObject.Find("CapnGigi");

        // Find the child EndPosition object in the GameStart parent
        platformEnd_Right = platformStart.Find("PlatformEnd_Right").position;
        platformEnd_Left = platformStart.Find("PlatformEnd_Left").position;
    }

    private void Start()
    {
        // Fetch list of Platform prefabs (Runs in Start to ensure list has been generated by other script on Awake)
        platformList = ProceduralAI.platformPrefabs;
    }
    #endregion

    #region Spawn Platforms to the Right
    public void SpawnPlatformChunk_Right()
    {
        //Get the transform to refrence the next End Position
        Transform lastPlatformEnd_Right = SpawnPlatformChunk_Right(platformEnd_Right);
        platformEnd_Right = lastPlatformEnd_Right.Find("PlatformEnd_Right").position;
    }
    public Transform SpawnPlatformChunk_Right(Vector3 nextChunk)
    {
        // Get random Platform Chunk from List
        platformChunk = RandomChunkerizer(0, platformList.Count);

        // Spawn the Platform Chunk and log to AI count
        Transform nextPlatformChunk_Right = Instantiate(platformChunk, nextChunk, Quaternion.identity);
        ProceduralAI.platformChunkSpawned += 1;

        // Return the transform for sister method
        return nextPlatformChunk_Right;
    }
    #endregion

    #region Spawn Platforms to the Left
    public void SpawnPlatformChunk_Left()
    {
        //Get the transform to refrence the end of previous chunk
        Transform lastPlatformEnd_Left = SpawnPlatformChunk_Left(platformEnd_Left);
        platformEnd_Left = lastPlatformEnd_Left.Find("PlatformEnd_Left").position;
    }
    public Transform SpawnPlatformChunk_Left(Vector3 nextChunk)
    {
        // Get random Platform Chunk from List
        platformChunk = RandomChunkerizer(0, platformList.Count);

        // Spawn the Platform chunk and log to AI count
        Transform nextPlatformChunk_Left = Instantiate(platformChunk, nextChunk, Quaternion.identity);
        ProceduralAI.platformChunkSpawned += 1;

        // Return the transform for sister method
        return nextPlatformChunk_Left;
    }
    #endregion

    #region Random "Chunkerizer"
    private Transform RandomChunkerizer(int floor, int ceiling)
    {
        // Variable to hold the index of random list element
        int randomChunk = 0;

        // Get random index for list
        randomChunk = UnityEngine.Random.Range(0, platformList.Count);

        // Call GameObject from list and get its transform
        platformObj = platformList[randomChunk];
        platformChunk = platformObj.transform;

        // Return the randomly-chosen Platform Chunk
        return platformChunk;
    }
    #endregion
}

